# -*- coding: utf-8 -*-
"""CodingExercise_Liao

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a2O7-JY4SECOrnuuym6COiWId6TpJH0n

Name: Edrian Liao \\
Start Date: 01/20/22 \\
Finish Date: 01/22/22

**Bergin Lab Application:** *Coding Exercise*

# 1. Accessing the file, *reference_data.csv*
"""

import pandas as pd
import io
from google.colab import files

# upload reference_data.csv from PC
up = files.upload()
refCsv = pd.read_csv(io.BytesIO(up['reference_data.csv']))
display(refCsv)

"""# 2. Change time stamps from local time to the universal time coordinate (UTC)"""

def convert(data):

  # main helper method in converting a date-time entry to its UTC counterpart

  date, time = data.split()
  mo, day, yr = date.split("/")

  mo = int(mo)
  day = int(day)
  yr = int(yr)

  hr, min = time.split(":")
  new_time = int(hr)*60 + int(min) - 5.75*60
  
  if new_time < 0:
    new_hr = 24 + new_time//60
    day -= 1
    if day == 0:
      if mo in {2, 4, 6, 9, 11}:
        mo -= 1
        day = 31
      elif mo == 1:
        yr -= 1
        mo = 12
        day = 31
      elif mo == 3:
        mo -= 1
        day = 28
      else:
        mo -= 1
        day = 30

  else:
    new_hr = new_time//60
  
  new_min = new_time % 60
  
  if new_min > 9:
    new_time = str(int(new_hr)) + ":" +  str(int(new_min))
  else:
    new_time = str(int(new_hr)) + ":" + "0" + str(int(new_min))
  
  return str(mo) +"/" + str(day) + "/" + str(yr) + " " + new_time;

for i in range(len(refCsv['date_time'])):
  refCsv.loc[i, 'date_time'] = convert(refCsv['date_time'][i])

display(refCsv[:100]) #displays the updated date_time entries

"""# 3. Calculating the hourly average **"PM2.5**" value"""

import numpy as np

arr = []
for entry in refCsv['date_time'][:61742]:
  #excluded the last hour since only 36 measurements were recorded
  hr = entry.split()[1].split(":")[0]
  arr.append(int(hr))

num = arr[0]
ctr = 0
i1 = 0
dict_averages = {}

for i2 in range(len(arr)):
  if arr[i2] == num:
    ctr+=1
  else:
    num = arr[i2]
    if ctr >= 45:
      date, time = refCsv['date_time'][i1].split()
      mo, day, yr = date.split("/")
      if int(mo) < 10:
        mo = "0" + mo
      if int(day) < 10:
        day = "0" + day
      hr = time.split(":")[0]
      if int(hr) < 10:
        hr = "0" + hr
      new_entry = mo + "/" + day + "/" + yr + " " + hr
      dict_averages[new_entry] = np.average(refCsv['PM2.5'][i1:i2])
    i1 = i2
    ctr = 1

display(dict_averages)
#12/4/21 didn't have at least 45 measurements per hour from 2:00 - 5:00

"""# 4. Plot "PM2.5" value against time"""

# importing the necessary library
import matplotlib.pyplot as plt

# initializing data to be plotted with respect to their axis
y = []
for data in dict_averages.values():
  y.append(data)
x = np.arange(len(y))


# plot initialization and setting
plt.figure(figsize=(20,2))
plt.title("Hourly-averaged PM 2.5 vs. Time")
plt.xlabel("Time (per hour)")
plt.ylabel("Hourly-averaged PM 2.5")
plt.plot(x, y, color = "green")
plt.show()

"""# 5. Accessing the file, *sensor_data.csv*"""

# upload sensor_data.csv from PC
up = files.upload()
sensorCsv = pd.read_csv(io.BytesIO(up['sensor_data.csv']))
display(sensorCsv)

"""# 6. Remove data records when PM Sensor Status != 0"""

ini = len(sensorCsv)
sensorCsv = sensorCsv.drop(sensorCsv[sensorCsv['PM Sensor Status'] != 0].index)
print("Number of Deleted Records: " + str(ini - len(sensorCsv)))

"""# 7. Calculating the hourly-averaged **"PM 2.5"** value, Temperature, and Relative Humidity"""

arr1 = []

for entry in sensorCsv['Timestamp']:
  hr = entry.split()[1].split(":")[0]
  arr1.append(int(hr))

num1 = arr1[0]
ctr1 = 0
i3 = 0
pm_averages = {}
temp_averages = {}
rh_averages = {}

pm = [int(i) for i in sensorCsv['PM2.5']]
temp = [float(j) for j in sensorCsv['Temperature']]
rh = [float(k) for k in sensorCsv['Relative Humidity']]

for i4 in range(len(arr1)):
  if arr1[i4] == num1:
    ctr1+=1
  else:
    num1 = arr1[i4]
    if ctr1 >= 45:
      date, time = sensorCsv['Timestamp'][i3+1].split()
      hr = time.split(":")[0]
      pm_averages[date + " " + hr] = np.average(pm[i3:i4])
      temp_averages[date + " " + hr] = np.average(temp[i3:i4])
      rh_averages[date + " " + hr] = np.average(rh[i3:i4])
    i3 = i4+1
    ctr1 = 1

display(pm_averages)
display(temp_averages)
display(rh_averages)

"""# 8. Plot Temperature and Relative Humidity against time"""

# initializing data to be plotted with respect to their axis
y = []
for a in temp_averages.values():
  y.append(a)
z = []
for b in rh_averages.values():
  z.append(b)
x = np.arange(len(y))

# plot initialization and setting
fig = plt.figure(figsize=(20,4))
ax1 = fig.subplots() 
  
ax1.set_xlabel('Time (per hour)') 
ax1.set_ylabel('Temperature (in Celsius)', color = 'red') 
ax1.plot(x, y, color = 'red') 
ax1.tick_params(axis ='y', labelcolor = 'red') 

ax2 = ax1.twinx() 
  
ax2.set_ylabel('Relative Humidity', color = 'blue') 
ax2.plot(x, z, color = 'blue') 
ax2.tick_params(axis ='y', labelcolor = 'blue') 

a,b = 0, 100
ax1.set_ylim(a,b)
ax2.set_ylim(a,b)

plt.show()

"""# 9. Filtering Sensor Data"""

x = []
y = []
z = []

for s in pm_averages.keys():
  if s in dict_averages.keys():
    x.append(dict_averages.get(s))
    y.append(pm_averages.get(s))
    z.append(s)

print("Reference: " + str(x))
print("Sensor: " + str(y))
print(len(x))

"""# 10. Make a scatter plot of **"PM2.5"** values in refCSV against those in sensorCsv"""

from sklearn.metrics import r2_score

line = np.poly1d(np.polyfit(x, y, 1))
plt.figure(figsize=(8,8))
plt.ylim(0,200)
plt.xlim(0,200)
plt.scatter(x, y)
plt.title("Comparison of P2.5 values from Reference and Sensor Data")
plt.plot(x, line(x), color = "red")

r2 = r2_score(x, y)

print("Best Fit Line: " + str(line))
print("R^2 value: " + str(r2))
print()
plt.show()